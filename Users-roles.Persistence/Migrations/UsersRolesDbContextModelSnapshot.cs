// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsersRoles.Persistence;

namespace Users_roles.Persistence.Migrations
{
    [DbContext(typeof(UsersRolesDbContext))]
    partial class UsersRolesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UsersRoles.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<int>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UsersRoles.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("UserAvatarRelativePath");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UsersRoles.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100);

                    b.Property<string>("RoleId")
                        .HasMaxLength(100);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("UsersRoles.Domain.Entities.User", b =>
                {
                    b.OwnsOne("UsersRoles.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("UserId");

                            b1.Property<string>("FirstName");

                            b1.Property<string>("LastName");

                            b1.Property<string>("MiddleName");

                            b1.ToTable("Users");

                            b1.HasOne("UsersRoles.Domain.Entities.User")
                                .WithOne("FullName")
                                .HasForeignKey("UsersRoles.Domain.ValueObjects.FullName", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("UsersRoles.Domain.ValueObjects.MyEmail", "MyEmail", b1 =>
                        {
                            b1.Property<string>("UserId");

                            b1.Property<string>("Value");

                            b1.ToTable("Users");

                            b1.HasOne("UsersRoles.Domain.Entities.User")
                                .WithOne("MyEmail")
                                .HasForeignKey("UsersRoles.Domain.ValueObjects.MyEmail", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("UsersRoles.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("UsersRoles.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UsersRoles.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
